{"version":3,"sources":["Components/MovieList.js","Components/NominationList.js","Components/PopUp.js","App.js","reportWebVitals.js","index.js"],"names":["MovieList","handleClick","e","props","nominateMovie","target","value","createURL","bind","imdbID","className","this","data","movieList","map","movie","src","Poster","href","Title","Year","onClick","Component","NominationList","clickedNomination","trackNomination","text","nominations","nomination","PopUp","delete","id","App","state","titleSearch","searchTerm","clickedItem","createArrayofTitleKey","deleteNomination","nominationButton","removeDuplicates","searchAPI","updateMovieURL","updateSearchTerm","objectList","i","keyList","length","push","newArray","splice","setState","movieNominated","array","movieArray","adjMovieArray","noDuplicates","titleList","indexOf","apiURL","fetch","then","response","json","Search","finalArray","catch","error","console","log","newMovieArray","event","alt","htmlFor","placeholder","onChange","name","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08d5cc10.chunk.js","sourcesContent":["//-----------------------------------------------------------------------------------------\n// IMPORT STATEMENTS\n//-----------------------------------------------------------------------------------------\nimport React, { Component } from 'react';\n\n//-----------------------------------------------------------------------------------------\n// COMPONENT\n//-----------------------------------------------------------------------------------------\nclass MovieList extends Component {\n\n    constructor(){\n        super();\n\n        this.createURL = this.createURL.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n    // FUNCTIONS\n    createURL(imdbID){\n        var newurl = 'https://www.imdb.com/title/'+imdbID+'/'\n        return newurl\n    }\n\n    handleClick = (e) => {\n        this.props.nominateMovie(e.target.value)\n    }\n\n    render(){\n        return (\n            <div className=\"movieBox\">\n            {this.props.data.movieList.map((movie) => {\n                return(\n                    <div className=\"movieContainer\" key={movie.Title}>\n                        <img className =\"poster\" src={movie.Poster}></img>\n                        <a className=\"title\" href={this.createURL(movie.imdbID)}>{movie.Title}</a>\n                        <div className=\"yearContainer\">\n                            <span className=\"descYear\">Year:</span>\n                            <span className=\"year\">{movie.Year}</span>\n                        </div>\n                        <button className=\"nominateBtn\" value={movie.Title} onClick={this.handleClick}>Nominate</button>\n                    </div>\n                )     \n            })}\n            </div>\n    )\n  }\n}\n\nexport default MovieList;","//-----------------------------------------------------------------------------------------\n// IMPORT STATEMENTS\n//-----------------------------------------------------------------------------------------\nimport React, { Component } from 'react';\n\n//-----------------------------------------------------------------------------------------\n// COMPONENT\n//-----------------------------------------------------------------------------------------\nclass NominationList extends Component {\n    \n    constructor(){\n        super();\n\n        this.clickedNomination = this.clickedNomination.bind(this);\n    }\n\n    clickedNomination(e){\n        this.props.trackNomination(e.target.text);\n    }\n\n    render(){\n        return (\n        <div className=\"nominationContainer\">\n            <h2 className=\"nominationHeader\">Nominations</h2>\n            {this.props.data.nominations.map((nomination) => {\n                return(\n                    <div key={nomination} className = \"individualNomination\">\n                        <a onClick={this.clickedNomination} value={nomination} href=\"#popup1\" className = \"nomination\" key={nomination}>{nomination}</a>\n                        <img className=\"deleteIcon\" src=\"https://github.com/SG-Command/movieapp/blob/master/src/Images/delete-white-24dp.svg?raw=true/\"/>\n                    </div>\n                )     \n            })}\n        </div>\n    )\n  }\n}\n\nexport default NominationList;","//-----------------------------------------------------------------------------------------\n// IMPORT STATEMENTS\n//-----------------------------------------------------------------------------------------\nimport React, { Component } from 'react';\n\n//-----------------------------------------------------------------------------------------\n// COMPONENT\n//-----------------------------------------------------------------------------------------\nclass PopUp extends Component {\n    \n    constructor(){\n        super();\n        this.delete = this.delete.bind(this);\n    }\n\n    delete(){\n        this.props.delete();\n    }\n\n    render(){\n        return (\n        <div id=\"popup1\" className=\"overlay\">\n            <div className=\"popup\">\n                <h2>Would you like to Delete the Movie?</h2>\n                <a onClick ={this.delete} className=\"close1\" href=\"#\">Yes</a>\n                <a className=\"close2\" href=\"#\">No</a>\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default PopUp;","//-----------------------------------------------------------------------------------------\n// IMPORT STATEMENTS\n//-----------------------------------------------------------------------------------------\nimport React, { Component } from 'react';\n//Components\nimport MovieList from './Components/MovieList';\nimport NominationList from './Components/NominationList';\nimport PopUp from './Components/PopUp';\n\n//-----------------------------------------------------------------------------------------\n// COMPONENT\n//-----------------------------------------------------------------------------------------\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    // Initial State\n    this.state = {  movieList: [],\n                    nominations: [],\n                    titleSearch: \"\",\n                    searchTerm: \"\",\n                    clickedItem: \"\"}\n    \n    //Functions\n    this.createArrayofTitleKey = this.createArrayofTitleKey.bind(this);\n    this.deleteNomination = this.deleteNomination.bind(this);\n    this.nominationButton = this.nominationButton.bind(this);\n    this.nominateMovie = this.nominateMovie.bind(this);\n    this.removeDuplicates = this.removeDuplicates.bind(this);\n    this.searchAPI = this.searchAPI.bind(this);\n    this.updateMovieURL = this.updateMovieURL.bind(this);\n    this.updateSearchTerm = this.updateSearchTerm.bind(this);\n  }\n\n  createArrayofTitleKey(objectList){\n    /**Takes an input that is an array of movie objects. Converts all the Title keys of the\n    of the object into an array. Returns the array of titles. **/\n\n    var i;\n    var keyList = [];\n    for(i=0;i<objectList.length;i++){\n      keyList.push(objectList[i].Title);\n    }\n    return keyList;\n  }\n\n  deleteNomination(){\n    /**Takes no input. Loops through all the nominations to find the nomination that was clicked and\n    removes it from the array. The function then saves the new array to the state. **/\n    \n    var i;\n    for(i=0;i<this.state.nominations.length; i++){\n      /*Checks if the current nomination is equal to the value of the clicked nomination.*/\n      if(this.state.nominations[i]=== this.state.clickedItem){\n        /*Creates a new array of nominations without the clicked item*/\n        var newArray = this.state.nominations\n        newArray.splice(i,1)\n        this.setState({nominations: newArray})\n      }\n    }\n  }\n\n  nominationButton(nomination){\n    /**Takes a nominated movie as an input. Saves the nominated movie to the state so that it can be refenced later\n    in the deleteNomination() function if the user chooses to delete the nomination. **/\n\n    this.setState({clickedItem: nomination});\n  }\n\n  nominateMovie(movie){\n    /**Takes string of a movie title as an input. Checks to see if the movie was previously nominated and if there are less\n    than 5 nominations. If so the nominations array is updated to include the new movie.**/\n\n    // Checks to see if the movie was nominated\n    if(this.state.nominations === 0){\n      var newArray = [movie]\n      this.setState({nominations: newArray})\n    } else {\n      var i;\n      var movieNominated = false;\n      for(i=0;i<this.state.nominations.length; i++) {\n        if(this.state.nominations[i]=== movie){\n          movieNominated = true;\n          break;\n        }\n      }\n\n      // Updates the nomination array if the movie was not nomitated and there are less than 5 nominations\n      if (movieNominated === false && this.state.nominations.length <5){\n        var array = this.state.nominations\n        array.push(movie)\n        this.setState({nominations: array})\n      }\n    }\n  }\n\n  removeDuplicates(movieArray){\n    /**Takes the array of movie objects from the API pull as in input. Loops through the array to see if there are any\n     duplicate entries. Removes the duplicates entries. The function can only remove one duplicate at a time.**/\n    \n    var adjMovieArray = movieArray;\n    var noDuplicates = false;\n    \n    while (noDuplicates === false) {\n      var i;\n      noDuplicates = true;\n      var titleList = this.createArrayofTitleKey(adjMovieArray);\n      /*Loops through the titleList until it finds a duplicate. Breaks after a duplicate is found to avoid indexing issues.*/\n      for (i=0; i<titleList.length;i++){\n        if(titleList.indexOf(titleList[i]) !== i){\n          adjMovieArray.splice(i,1);\n          noDuplicates = false;\n          break;\n        }\n      }\n    }\n  }\n\n  searchAPI(){\n    /*Takes no input. Creates a url to make a call to the OMDb API which returns an array with up to 10\n    movie objects that match the search terms. Saves the array of movies to the state.*/\n    \n    var apiURL = 'https://www.omdbapi.com/?i=tt3896198&apikey=e919a77&s='\n    var i;\n\n    // Concatenates the URL for the API pull\n    for(i=0;i<this.state.searchTerm.length;i++){\n      if (this.state.searchTerm[i] !== \" \"){\n        apiURL = apiURL + this.state.searchTerm[i]\n      } else if (this.state.searchTerm[i] === \" \"){\n        apiURL = apiURL + \"+\"\n      }\n    }\n\n    //Add the type field to ensure only movies are searched\n    apiURL = apiURL + \"&type=movie\"\n\n    // Makes the call to the OMDb API\n    fetch(apiURL).then(response => response.json()).then(data => {\n      this.removeDuplicates(data.Search)\n      var finalArray = this.updateMovieURL(data.Search);\n      this.setState({movieList: finalArray},);\n    }).catch(error => console.log('error', error));\n  }\n\n  updateMovieURL(movieArray){\n    /*Takes the array of movies from the state as an input. Loops through the array and looks to see if there are any \n    movies missing a poster. If so it replaces the URL with a stock image. Returns an array with the adjusted links.*/\n    \n    var i;\n    var newMovieArray = movieArray;\n    for (i=0; i<movieArray.length; i++){\n      if(movieArray[i].Poster === \"N/A\") {\n        newMovieArray[i].Poster = \"https://github.com/SG-Command/movieapp/blob/master/src/Images/MovieFilm.png?raw=true\";\n      }\n    }\n    return newMovieArray\n  }\n\n  updateSearchTerm(event){\n    /*Takes an event from the text input as an input. Saves the input to the state.*/\n    this.setState({searchTerm: event.target.value});\n  }\n\n  // HTML for the webpage\n  render(){\n    return (\n      <div>\n        <div className=\"banner\">\n          <img className=\"award\" alt=\"Emmy Statue\" src=\"https://github.com/SG-Command/movieapp/blob/master/src/Images/EmmyTrophy.png?raw=true\"/>\n          <h1 className=\"shoppies\">The Shoppies</h1>\n          <img className=\"award\" alt=\"Emmy Statue\" src=\"https://github.com/SG-Command/movieapp/blob/master/src/Images/EmmyTrophy.png?raw=true\"/>\n        </div>\n        <div className =\"topBoxes\">\n        <div className=\"searchBox\">\n          <h2 className=\"searchHeader\">Search Criteria</h2>\n          <div className=\"searchContent\">\n            <label className=\"searchLabel\" htmlFor=\"movieTitle\"></label>\n            <input className =\"searchTerm\" placeholder=\"Enter a Movie...\" onChange={this.updateSearchTerm} name=\"movieTitle\" type=\"text\"></input>\n            <button className=\"searchBtn\" type=\"submit\" onClick={this.searchAPI}>Search</button>\n          </div>\n        </div>\n        <NominationList data={this.state} trackNomination={this.nominationButton}/>\n        </div>\n        <PopUp deleteNomination={this.deleteNomination} delete={this.deleteNomination}/>\n        <h2 className = \"movieHeader\" >Movies</h2>\n        <div>\n        <MovieList data={this.state} nominateMovie={this.nominateMovie}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}